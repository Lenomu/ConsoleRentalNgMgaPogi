#include <iostream>     // So we can do basic input/output stuff
#include <fstream>      // For reading/writing files, super important
#include <list>         // Using lists, cuz why not?
#include <map>          // Maps are good for looking things up fast
#include <string>       // For handling text, of course
#include <algorithm>    // For some string magic, like making things lowercase
#include <cctype>       // To check character types, like numbers or letters
#include <sstream>      // Helps with converting strings to numbers and back
#include <limits>       // For clearing the input buffer, it's kinda tricky otherwise

// Using namespace std; is common in beginner courses, so we'll keep it for brevity.
using namespace std;

// Just telling the compiler these things exist before we fully define them.
struct Console;
struct Rental;
class Inventory;
class RentalManager;
class Customer;
class CustomerManager;
class FileManager;

// Some helper functions everyone can use
bool isValidConsoleID(string id, Inventory& inv);
bool isValidCustomerID(string id);
bool isValidDate(string date);
void clearScreen(); // Clears the console, keeps things tidy
double calculateRentalFee(string consoleName); // Figures out how much to charge
double calculateAdditionalFees(Rental* rental); // For late returns or whatever
bool validateRentalInput(string customer, string consoleID, string date); // Checks if the rental info makes sense

// Little helper to make strings all lowercase. Handy for searches.
void stringToLower(string& str) {
    for (string::size_type i = 0; i < str.length(); ++i) {
        str[i] = static_cast<char>(tolower(static_cast<unsigned char>(str[i])));
    }
}

// This is what a 'Console' looks like in our system
struct Console {
    string id;
    string name;
    bool available; // True if you can rent it, false if it's out
};

// Manages all the gaming consoles we have
class Inventory {
    list<Console> consoles; // Our big list of all consoles

public:
    // Tries to load console data from a file. If no file, starts fresh.
    void loadFromFile() {
        ifstream file("inventory.txt");
        if (!file.is_open()) {
            cout << "Warning: Couldn't open inventory.txt. No biggie, starting with an empty list.\n";
            return;
        }

        consoles.clear(); // Get rid of old data, fresh start!
        string id, name, availability_str;
        while (file >> id >> name >> availability_str) {
            Console c;
            c.id = id;
            c.name = name;
            c.available = (availability_str == "1"); // 1 means available, 0 means not
            consoles.push_back(c);
        }
        file.close();
        cout << "Loaded " << consoles.size() << " consoles from the file. Nice.\n";
    }

    // Saves the current console list back to the file. Don't wanna lose data!
    void saveToFile() {
        ofstream file("inventory.txt");
        if (!file.is_open()) {
            cout << "Error: Seriously couldn't save inventory. This is bad.\n";
            return;
        }

        for (list<Console>::const_iterator it = consoles.begin(); it != consoles.end(); ++it) {
            file << it->id << " " << it->name << " " << (it->available ? "1" : "0") << "\n";
        }
        file.close();
    }

    // Shows all the consoles that are currently up for grabs
    void displayAll() {
        cout << "\n=== Available Consoles ===\n";
        if (consoles.empty()) {
            cout << "Looks like we're out of consoles. Bummer.\n";
            return;
        }
        cout << "ID\t\tName\t\tAvailable\n";
        cout << "----------------------------------------\n";
        // Loop through and print only the available ones
        for (list<Console>::const_iterator it = consoles.begin(); it != consoles.end(); ++it) {
            if (it->available) {
                cout << it->id << "\t\t" << it->name << "\t\tYes\n";
            }
        }
        cout << "\n";
    }

    // Tries to rent a console. If it's there and available, it's gone!
    Console* rentConsole(string id) {
        Console* console = searchByID(id);
        if (console != NULL && console->available) {
            console->available = false; // Mark it as taken
            saveToFile(); // Update the file
            return console;
        }
        return NULL; // Nope, couldn't rent it
    }

    // Handles a console being returned. Makes it available again.
    void returnConsole(string id) {
        Console* console = searchByID(id);
        if (console != NULL && !console->available) { // Found it and it was rented
            console->available = true; // Yay, it's back!
            saveToFile(); // Update the file
            cout << "Console " << id << " is back on the shelf.\n";
        } else {
            cout << "Error: Can't return console " << id << ". Maybe it's not ours or already here?\n";
        }
    }

    // Finds a console using its ID. Returns a pointer to it if found.
    Console* searchByID(string id) {
        for (list<Console>::iterator it = consoles.begin(); it != consoles.end(); ++it) {
            if (it->id == id) {
                return &(*it); // Found it!
            }
        }
        return NULL; // Not here, sorry
    }

    // Searches for consoles by part of their name. Kinda like a fuzzy search.
    list<Console> searchByName(string keyword) {
        list<Console> matchingConsoles; // A new list for results
        stringToLower(keyword); // Make the search term lowercase for easier matching

        for (list<Console>::const_iterator it = consoles.begin(); it != consoles.end(); ++it) {
            string consoleNameLower = it->name;
            stringToLower(consoleNameLower); // Make the console name lowercase too
            if (consoleNameLower.find(keyword) != string::npos) { // If the keyword is in the name
                matchingConsoles.push_back(*it); // Add it to our results
            }
        }
        return matchingConsoles;
    }
};

// What a 'Rental' record holds
struct Rental {
    string customer;    // Who rented it
    string consoleID;   // What console they rented
    string date;        // When they rented it
    double rentalFee;   // How much they paid (or will pay)
    string status;      // Like "ACTIVE", "RETURNED", or "OVERDUE"
};

// This class keeps track of who rented what
class RentalManager {
private:
    list<Rental> currentRentals; // Our list of ongoing rentals

public:
    RentalManager() {
        // Just creating an empty list when the manager starts up
    }

    // Handles the actual rental process
    void rent(Console* c, string customer, string date) {
        if (c == NULL) {
            cout << "Error: Pick a real console, please.\n";
            return;
        }
        if (isConsoleRented(c->id)) {
            cout << "Error: Console " << c->id << " is already out. Check rental records.\n";
            return;
        }

        double rentalFee = calculateRentalFee(c->name); // Calculate the price

        cout << "\n=== Rental Summary ===\n";
        cout << "Console: " << c->name << " (ID: " << c->id << ")\n";
        cout << "Customer: " << customer << "\n";
        cout << "Rental Date: " << date << "\n";
        cout << "Rental Fee: $" << rentalFee << "\n";

        char confirm;
        cout << "Confirm rental? (y/n): ";
        cin >> confirm;

        if (confirm == 'y' || confirm == 'Y') {
            Rental newRental; // Make a new rental record
            newRental.customer = customer;
            newRental.consoleID = c->id;
            newRental.date = date;
            newRental.rentalFee = rentalFee;
            newRental.status = "ACTIVE"; // It's active now!
            currentRentals.push_back(newRental); // Add it to our list
            cout << "Got it! Console " << c->id << " (" << c->name << ") is now with " << customer << " on " << date << ".\n";
            cout << "Total amount: $" << rentalFee << "\n";
            saveToFile(); // Save the new rental info
        } else {
            cout << "Rental cancelled. No worries.\n";
        }
    }

    // Handles when a console is brought back
    void returnRental(string consoleID) {
        list<Rental>::iterator it = currentRentals.begin();
        bool found = false;
        // Look for the rental in our active list
        while (it != currentRentals.end()) {
            if (it->consoleID == consoleID) {
                found = true;
                break;
            }
            ++it;
        }

        if (!found) {
            cout << "Error: No active rental found for console " << consoleID << ". Are you sure?\n";
            return;
        }

        cout << "\n=== Return Rental Details ===\n";
        cout << "Console ID: " << it->consoleID << "\n";
        cout << "Customer: " << it->customer << "\n";
        cout << "Rental Date: " << it->date << "\n";
        cout << "Rental Fee: $" << it->rentalFee << "\n";
        cout << "Status: " << it->status << "\n";

        double additionalFees = calculateAdditionalFees(&(*it)); // Check for any extra charges
        if (additionalFees > 0) {
            cout << "Extra Fees: $" << additionalFees << " (oops, someone was late or something)\n";
            cout << "Total Amount Due: $" << (it->rentalFee + additionalFees) << "\n";
        }

        char confirm;
        cout << "\nConfirm this return? (y/n): ";
        cin >> confirm;
        if (confirm == 'y' || confirm == 'Y') {
            cout << "Console " << consoleID << " successfully returned by " << it->customer << ".\n";
            currentRentals.erase(it); // Remove it from active rentals
            saveToFile(); // Update the file
        } else {
            cout << "Return process cancelled. Keeping it rented for now.\n";
        }
    }

    // Loads all the current rental records from a file.
    void loadFromFile() {
        ifstream file("rentals.txt");
        if (!file.is_open()) {
            cout << "Warning: No rentals.txt file found. Starting with no active rentals.\n";
            return;
        }

        currentRentals.clear(); // Clear out any old info
        string customer, consoleID, date, status_str;
        double rentalFee;
        while (file >> customer >> consoleID >> date >> rentalFee >> status_str) {
            Rental rental;
            rental.customer = customer;
            rental.consoleID = consoleID;
            rental.date = date;
            rental.rentalFee = rentalFee;
            rental.status = status_str;
            currentRentals.push_back(rental);
        }
        file.close();
        cout << "Loaded " << currentRentals.size() << " rentals from file. Cool.\n";
    }

    // Saves all current rental records to a file.
    void saveToFile() {
        ofstream file("rentals.txt");
        if (!file.is_open()) {
            cout << "Error: Couldn't save rentals to file. That's a problem.\n";
            return;
        }
        for (list<Rental>::const_iterator rental = currentRentals.begin(); rental != currentRentals.end(); ++rental) {
            file << rental->customer << " " << rental->consoleID << " " << rental->date
                 << " " << rental->rentalFee << " " << rental->status << "\n";
        }
        file.close();
    }

    // Displays all the rentals that are currently active.
    void showAllRentals() {
        if (currentRentals.empty()) {
            cout << "\n=== No Active Rentals ===\n";
            return;
        }
        cout << "\n=== Current Active Rentals ===\n";
        cout << "Customer\t\tConsole ID\tRental Date\tFee\tStatus\n";
        cout << "--------------------------------------------------------\n";
        for (list<Rental>::const_iterator rental = currentRentals.begin(); rental != currentRentals.end(); ++rental) {
            cout << rental->customer << "\t\t" << rental->consoleID << "\t\t"
                 << rental->date << "\t$" << rental->rentalFee << "\t" << rental->status << "\n";
        }
        cout << "\nTotal active rentals: " << currentRentals.size() << "\n";
    }

    // Checks if a specific console is currently rented out.
    bool isConsoleRented(string consoleID) {
        for (list<Rental>::const_iterator it = currentRentals.begin(); it != currentRentals.end(); ++it) {
            if (it->consoleID == consoleID) {
                return true; // Yep, it's rented!
            }
        }
        return false; // Nope, it's free
    }

    // Gets the details of a specific rental by console ID.
    Rental* getRentalInfo(string consoleID) {
        for (list<Rental>::iterator rental = currentRentals.begin(); rental != currentRentals.end(); ++rental) {
            if (rental->consoleID == consoleID) {
                return &(*rental);
            }
        }
        return NULL; // Not found
    }

    // Gets a list of all rentals for a specific customer.
    list<Rental> getCustomerRentals(string customer) {
        list<Rental> customerRentals;
        for (list<Rental>::const_iterator rental = currentRentals.begin(); rental != currentRentals.end(); ++rental) {
            if (rental->customer == customer) {
                customerRentals.push_back(*rental);
            }
        }
        return customerRentals;
    }

    // Just gives us a count of all current rentals.
    int getTotalRentals() {
        return static_cast<int>(currentRentals.size());
    }

    // Checks if a customer currently has any active rentals.
    bool hasActiveRentals(string customer) {
        for (list<Rental>::const_iterator it = currentRentals.begin(); it != currentRentals.end(); ++it) {
            if (it->customer == customer) {
                return true;
            }
        }
        return false;
    }

    // Shows some overall rental stats, like how many rentals are active.
    void showRentalStatistics() {
        cout << "\n=== Rental Statistics ===\n";
        cout << "Total active rentals: " << currentRentals.size() << "\n";
        if (!currentRentals.empty()) {
            list<string> uniqueCustomers;
            // Count how many different customers have rentals
            for (list<Rental>::const_iterator rental = currentRentals.begin(); rental != currentRentals.end(); ++rental) {
                bool found = false;
                for (list<string>::const_iterator customer_it = uniqueCustomers.begin(); customer_it != uniqueCustomers.end(); ++customer_it) {
                    if (*customer_it == rental->customer) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    uniqueCustomers.push_back(rental->customer);
                }
            }
            cout << "Unique customers with active rentals: " << uniqueCustomers.size() << "\n";
        }
    }

    // DANGER ZONE: Clears ALL rental records. Only for admin!
    void clearAllRentals() {
        currentRentals.clear();
        saveToFile();
        cout << "Poof! All rental records are gone.\n";
    }
};

// What a 'Customer' record holds.
class Customer {
public:
    string id;
    string name;
    string contactNumber;
    int age;
    list<string> rentalHistory; // Keeping track of past rentals

    // Adds a new rental to a customer's history.
    void addRental(string consoleName, int hours) {
        stringstream ss;
        ss << consoleName << " - " << hours << " hour(s)";
        rentalHistory.push_back(ss.str());
    }

    // Shows basic info about a customer.
    void displayDetails() const {
        cout << "Name: " << name << "\n";
        cout << "Age: " << age << "\n";
        cout << "Contact: " << contactNumber << "\n";
        cout << "ID: " << id << "\n";

        // Shows the most recent rental if there is one
        if (!rentalHistory.empty()) {
            cout << "Last Rental: " << rentalHistory.back() << "\n";
        }
        cout << "\n";
    }

    // Shows a customer's entire rental history.
    void displayHistory() const {
        if (rentalHistory.empty()) {
            cout << "No past rentals for this customer. Sad!\n";
            return;
        }
        cout << "--- Rental History for " << name << " ---\n";
        int i = 1;
        for (list<string>::const_iterator record = rentalHistory.begin(); record != rentalHistory.end(); ++record) {
            cout << "Rental #" << i++ << ": " << *record << "\n";
        }
        cout << "\n";
    }
};

// Manages all our customer records.
class CustomerManager {
    map<string, Customer> customers; // Stores customers by their ID

public:
    // Just a placeholder, file loading isn't fully set up for customers yet.
    void loadFromFile() {
        cout << "CustomerManager: File loading is kinda basic here. Customers are just in memory for now.\n";
    }

    // Adds a new customer to the system.
    void addCustomer(string id, string name) {
        if (customers.count(id)) {
            cout << "Error: A customer with ID '" << id << "' already exists. Try again.\n";
            return;
        }

        Customer newCustomer;
        newCustomer.id = id;
        newCustomer.name = name;
        cout << "Enter Age: ";
        cin >> newCustomer.age;
        // This cin.ignore is important to prevent weird input skips!
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        cout << "Enter Contact Number: ";
        // Using getline because contact numbers can have spaces/dashes
        getline(cin, newCustomer.contactNumber);

        customers[id] = newCustomer; // Add the new customer
        cout << "Customer added successfully! Welcome!\n";
    }

    // Updates a customer's rental history.
    void updateHistory(string id, string consoleName, int duration) {
        if (!customers.count(id)) {
            cout << "Customer ID not found: " << id << ". Can't update history.\n";
            return;
        }
        customers[id].addRental(consoleName, duration); // Add the new rental to their list
        cout << "Rental record added to customer's history. Sweet.\n";
    }

    // Shows a specific customer's rental history.
    void viewCustomerHistory(string id) {
        if (!customers.count(id)) {
            cout << "Customer ID not found: " << id << ".\n";
            return;
        }
        customers[id].displayHistory();
    }

    // Shows details for a specific customer.
    void displayCustomerDetails(string id) {
        if (!customers.count(id)) {
            cout << "Customer ID not found: " << id << ".\n";
            return;
        }
        customers[id].displayDetails();
    }

    // Lists all customers in the system.
    void displayAllCustomers() {
        if (customers.empty()) {
            cout << "No customers in the system yet.\n";
            return;
        }
        for (map<string, Customer>::const_iterator it = customers.begin(); it != customers.end(); ++it) {
            cout << "--- Customer: " << it->first << " ---\n";
            it->second.displayDetails();
        }
    }

    // Checks if a customer ID exists in our records.
    bool customerExists(string id) {
        return customers.count(id) > 0;
    }

    // Gets a pointer to a customer object using their ID.
    Customer* getCustomerByID(string id) {
        map<string, Customer>::iterator it = customers.find(id);
        if (it != customers.end()) {
            return &(it->second);
        }
        return NULL; // Not found, sorry
    }
};

// This class handles loading/saving files and generating reports.
class FileManager {
public:
    // Shows the raw content of our data files. Kinda nerdy but useful.
    void showAllFiles() {
        cout << "\n--- Inventory File (inventory.txt) ---\n";
        ifstream invFile("inventory.txt");
        string line;
        if (invFile.is_open()) {
            while (getline(invFile, line)) {
                cout << line << endl;
            }
            invFile.close();
        } else {
            cout << "Can't open inventory.txt. Is it there?\n";
        }

        cout << "\n--- Rentals File (rentals.txt) ---\n";
        ifstream rentalFile("rentals.txt");
        if (rentalFile.is_open()) {
            while (getline(rentalFile, line)) {
                cout << line << endl;
            }
            rentalFile.close();
        } else {
            cout << "Can't open rentals.txt. Where did it go?\n";
        }
    }

    // Generates a simple report about our console and rental status.
    void generateReport() {
        ifstream invFile("inventory.txt");
        ifstream rentalFile("rentals.txt"); // This one isn't actually used in this func, but okay.

        int totalConsoles = 0;
        int rentedConsoles = 0;
        if (invFile.is_open()) {
            string id, name, availableStr;
            while (invFile >> id >> name >> availableStr) {
                totalConsoles++; // Count every console
                if (availableStr == "0") {
                    rentedConsoles++; // Count if it's rented (0 means unavailable)
                }
            }
            invFile.close();
        } else {
            cout << "Error: Couldn't open inventory.txt for report. Can't make report accurate.\n";
        }

        int availableConsoles = totalConsoles - rentedConsoles;
        cout << "\n--- System Report ---\n";
        cout << "Total Consoles        : " << totalConsoles << endl;
        cout << "Currently Rented      : " << rentedConsoles << endl;
        cout << "Currently Available   : " << availableConsoles << endl;
    }
};

// Checks if a console ID is valid (basic check, just alphanumeric)
bool isValidConsoleID(string id, Inventory& inv) {
    if (id.empty()) {
        return false; // Can't be empty!
    }
    for (string::size_type i = 0; i < id.length(); ++i) {
        if (!isalnum(static_cast<unsigned char>(id[i]))) {
            return false; // Only letters and numbers allowed
        }
    }
    return true; // Looks good
}

// Checks if a customer ID is valid (3 digits, not 000)
bool isValidCustomerID(string id) {
    if (id.length() != 3) {
        return false; // Must be exactly three digits
    }

    for (string::size_type i = 0; i < id.length(); ++i) {
        if (!isdigit(static_cast<unsigned char>(id[i]))) {
            return false; // Must be only digits
        }
    }

    stringstream ss(id);
    int customerNum = 0;
    ss >> customerNum;

    if (ss.fail() || customerNum < 1) {
        return false; // If it's not a valid number or is 000
    }
    return true; // All good
}

// Checks if the date format is YYYY-MM-DD. It's a simple check.
bool isValidDate(string date) {
    if (date.length() != 10) return false; // Needs to be exactly 10 chars
    // Check if chars are digits and dashes are in the right places
    if (isdigit(static_cast<unsigned char>(date[0])) && isdigit(static_cast<unsigned char>(date[1])) &&
        isdigit(static_cast<unsigned char>(date[2])) && isdigit(static_cast<unsigned char>(date[3])) &&
        date[4] == '-' &&
        isdigit(static_cast<unsigned char>(date[5])) && isdigit(static_cast<unsigned char>(date[6])) &&
        date[7] == '-' &&
        isdigit(static_cast<unsigned char>(date[8])) && isdigit(static_cast<unsigned char>(date[9]))) {
        return true;
    }
    return false; // Nope, date format is wrong
}

// Clears the whole console screen. Can sometimes cause a flicker, but cleans things up.
void clearScreen() {
#ifdef _WIN32 // For Windows systems
    system("cls");
#else // For Linux/macOS
    system("clear");
#endif
}

// Basic check to make sure the rental inputs aren't empty.
bool validateRentalInput(string customer, string consoleID, string date) {
    if (customer.empty()) {
        cout << "Error: Customer ID can't be blank, c'mon.\n";
        return false;
    }
    if (consoleID.empty()) {
        cout << "Error: Console ID can't be empty either!\n";
        return false;
    }
    if (date.empty()) {
        cout << "Error: Need a rental date. Pls enter one.\n";
        return false;
    }
    return true; // All looks good!
}

// Determines the rental price based on the console's name.
double calculateRentalFee(string consoleName) {
    stringToLower(consoleName); // Make it lowercase to compare easily

    // Check for specific console names and assign fees
    if (consoleName.find("ps5") != string::npos || consoleName.find("playstation 5") != string::npos) {
        return 950.0; // Price for PS5
    } else if (consoleName.find("ps4") != string::npos || consoleName.find("playstation 4") != string::npos) {
        return 750.0; // Price for PS4
    } else if ((consoleName.find("xbox") != string::npos && consoleName.find("series") != string::npos) || consoleName.find("xbox series") != string::npos) {
        return 950.0; // Price for Xbox Series
    } else if (consoleName.find("xbox one") != string::npos) {
        return 750.0; // Price for Xbox One
    } else if (consoleName.find("nintendo switch") != string::npos || consoleName.find("switch") != string::npos) {
        return 800.0; // Price for Switch
    } else if (consoleName.find("nintendo") != string::npos) {
        return 600.0; // General Nintendo price
    } else if (consoleName.find("steam deck") != string::npos) {
        return 1000.0; // Price for Steam Deck (fancy!)
    } else {
        return 650.0; // Default price for anything else
    }
}

// Calculates any extra fees, like if a rental is overdue.
double calculateAdditionalFees(Rental* rental) {
    double additionalFees = 0.0;
    if (rental->status == "OVERDUE") {
        additionalFees += 200.0; // Ooh, 200 for being late!
    }
    return additionalFees;
}

// This is the main menu function, where all the magic happens!
void mainMenu(Inventory& inv, RentalManager& rentMgr, CustomerManager& custMgr, FileManager& fileMgr) {
    int choice;
    string id_input, name_input, date_input, customerID_input, consoleID_input;

    do {
        clearScreen(); // Clear the screen for a fresh menu display
        cout << "\n===== Game Console Rental System ====\n";
        cout << "1. View Available Consoles\n";
        cout << "2. Rent Console\n";
        cout << "3. Return Console\n";
        cout << "4. View Current Rentals\n";
        cout << "5. Customer Management\n";
        cout << "6. System Reports and Files\n";
        cout << "7. Exit\n";
        cout << "What do you wanna do? Enter your choice: ";
        cin >> choice;

        // Clears the input buffer so getline doesn't mess up later
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        switch (choice) {
            case 1:
                inv.displayAll(); // Show what we got!
                break;
            case 2: { // Rent Console section
                // Show the available consoles first, so the user knows what's up
                inv.displayAll();

                cout << "Enter Customer ID (like 001 or 123): ";
                getline(cin, customerID_input);

                if (!isValidCustomerID(customerID_input)) {
                    cout << "Whoops, Invalid Customer ID. Needs to be three digits, not '000'.\n";
                    break;
                }

                if (!custMgr.customerExists(customerID_input)) {
                    cout << "New customer alert! Let's get them added...\n";
                    cout << "Enter Customer Name: ";
                    getline(cin, name_input);
                    custMgr.addCustomer(customerID_input, name_input);
                } else {
                    Customer* existingCustomer = custMgr.getCustomerByID(customerID_input);
                    if (existingCustomer) {
                        cout << "Found customer: " << existingCustomer->name << endl;
                    }
                }

                cout << "Enter the Console ID you want to rent: ";
                getline(cin, consoleID_input);

                Console* consoleToRent = inv.searchByID(consoleID_input);

                if (consoleToRent == NULL) {
                    cout << "Hmm, console ID not found. Check your typing.\n";
                    break;
                }
                if (!consoleToRent->available) {
                    cout << "Bummer, Console " << consoleID_input << " is taken right now.\n";
                    break;
                }
                if (rentMgr.isConsoleRented(consoleID_input)) {
                    cout << "Wait, our records say Console " << consoleID_input << " is already out. Something's fishy.\n";
                    break;
                }

                cout << "Enter Rental Date (like YYYY-MM-DD): ";
                getline(cin, date_input);
                if (!isValidDate(date_input)) {
                    cout << "That's not a date! Use YYYY-MM-DD format.\n";
                    break;
                }
                                
                if (!validateRentalInput(customerID_input, consoleID_input, date_input)) {
                    cout << "Something's off with your rental info. Let's try again.\n";
                    break;
                }

                inv.rentConsole(consoleID_input); // Mark it as rented in inventory
                rentMgr.rent(consoleToRent, customerID_input, date_input); // Add to rental records
                custMgr.updateHistory(customerID_input, consoleToRent->name, 2); // Update customer's history, assume 2 hours for demo
                break;
            }
            case 3: { // Return Console section
                cout << "Enter the Console ID you're returning: ";
                getline(cin, consoleID_input);
                if (!inv.searchByID(consoleID_input)) {
                    cout << "Couldn't find that console in our inventory. Are you sure it's ours?\n";
                    break;
                }
                if (!rentMgr.isConsoleRented(consoleID_input)) {
                    cout << "Hey, Console " << consoleID_input << " isn't even rented out right now.\n";
                    break;
                }
                rentMgr.returnRental(consoleID_input); // Handle the rental side of things
                inv.returnConsole(consoleID_input); // Make it available again
                break;
            }
            case 4:
                rentMgr.showAllRentals(); // See who's got what
                break;
            case 5: { // Customer Management Sub-menu
                int custChoice;
                do {
                    clearScreen();
                    cout << "\n===== Customer Management =====\n";
                    cout << "1. Add New Customer\n";
                    cout << "2. View Customer Details\n";
                    cout << "3. View Customer Rental History\n";
                    cout << "4. View All Customers\n";
                    cout << "5. Back to Main Menu\n";
                    cout << "What now? Pick an option: ";
                    cin >> custChoice;
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');

                    switch (custChoice) {
                        case 1: {
                            cout << "New Customer ID (like 001, 123): ";
                            getline(cin, id_input);
                            if (!isValidCustomerID(id_input)) {
                                cout << "Bad Customer ID format. Three digits, not '000', remember?\n";
                                break;
                            }
                            cout << "What's their Name?: ";
                            getline(cin, name_input);
                            custMgr.addCustomer(id_input, name_input);
                            break;
                        }
                        case 2: {
                            cout << "Enter Customer ID to see details: ";
                            getline(cin, id_input);
                            custMgr.displayCustomerDetails(id_input);
                            break;
                        }
                        case 3: {
                            cout << "Enter Customer ID for history: ";
                            getline(cin, id_input);
                            custMgr.viewCustomerHistory(id_input);
                            break;
                        }
                        case 4:
                            custMgr.displayAllCustomers(); // Show everyone!
                            break;
                        case 5:
                            cout << "Going back to the main menu. See ya.\n";
                            break;
                        default:
                            cout << "Huh? Invalid choice. Try again.\n";
                    }
                    if (custChoice != 5) {
                        cout << "Hit Enter to keep going...";
                        cin.get();
                    }
                } while (custChoice != 5);
                break;
            }
            case 6: { // System Reports and Files Sub-menu
                int reportChoice;
                do {
                    clearScreen();
                    cout << "\n===== System Reports & Files =====\n";
                    cout << "1. Generate System Report\n";
                    cout << "2. Show Raw File Contents\n";
                    cout << "3. View Rental Statistics\n";
                    cout << "4. Clear All Rental Records (Admin Only - BE CAREFUL!)\n";
                    cout << "5. Back to Main Menu\n";
                    cout << "Choose a report option: ";
                    cin >> reportChoice;
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');

                    switch (reportChoice) {
                        case 1:
                            fileMgr.generateReport(); // Get the system overview
                            break;
                        case 2:
                            fileMgr.showAllFiles(); // See what's actually in those text files
                            break;
                        case 3:
                            rentMgr.showRentalStatistics(); // How many rentals are active?
                            break;
                        case 4: {
                            char confirmClear;
                            cout << "Are you absolutely, positively sure you wanna nuke ALL rental records? This can't be undone. (y/n): ";
                            cin >> confirmClear;
                            cin.ignore(numeric_limits<streamsize>::max(), '\n');
                            if (confirmClear == 'y' || confirmClear == 'Y') {
                                rentMgr.clearAllRentals(); // Boom! Gone.
                                cout << "All rental records have been wiped. You're brave.\n";
                            } else {
                                cout << "Smart choice. Clear operation cancelled.\n";
                            }
                            break;
                        }
                        case 5:
                            cout << "Heading back to the main menu.\n";
                            break;
                        default:
                            cout << "Not a valid option. Try again, friend.\n";
                    }
                    if (reportChoice != 5) {
                        cout << "Press Enter to continue...";
                        cin.get();
                    }
                } while (reportChoice != 5);
                break;
            }
            case 7:
                cout << "Exiting the system. Thanks for using it! Bye bye!\n";
                break;
            default:
                cout << "That wasn't one of the options. Try again, please.\n";
        }
        if (choice != 7) {
            cout << "Press Enter to continue...";
            cin.get(); // Pause until user presses Enter
        }
    } while (choice != 7); // Keep looping until they choose to exit
}

int main() {
    // Setting up all our managers and stuff
    Inventory inv;
    RentalManager rentMgr;
    CustomerManager custMgr;
    FileManager fileMgr;

    // Load up the data when the program starts
    inv.loadFromFile();
    rentMgr.loadFromFile();

    // Start the main program loop!
    mainMenu(inv, rentMgr, custMgr, fileMgr);

    return 0; // Everything ran fine, exit code 0
}
