///////////////////////
// ðŸ‘¤ MEMBER 3: Customer Manager
///////////////////////
class Customer {
public:
    string id;                      // Unique customer ID
    string name;                    // Customer name
    string contactNumber;           // Contact number
    int age;                        // Age
    list<string> rentalHistory;     // Rental history (e.g., "PS5 - 2 hours")

    // Add a rental entry to history
    void addRental(string consoleName, int hours) {
        string record = consoleName + " - " + to_string(hours) + " hour(s)";
        rentalHistory.push_back(record);
    }

    // Display basic info + latest rental
    void displayDetails() const {
        cout << "Name: " << name << "\n";
        cout << "Age: " << age << "\n";
        cout << "Contact: " << contactNumber << "\n";
        cout << "ID: " << id << "\n";

        if (!rentalHistory.empty()) {
            cout << "Last Rental: " << rentalHistory.back() << "\n";
        }
        cout << "\n";
    }

    // Display full rental history
    void displayHistory() const {
        if (rentalHistory.empty()) {
            cout << "No rental history available.\n";
            return;
        }

        cout << "--- Rental History for " << name << " ---\n";
        int i = 1;
        for (const auto& record : rentalHistory) {
            cout << "Rental #" << i++ << ": " << record << "\n";
        }
        cout << "\n";
    }
};

class CustomerManager {
    map<string, Customer> customers;  // Customer list indexed by ID

public:
    // Add a new customer
    void addCustomer(string id, string name) {
        if (customers.count(id)) {
            cout << "Customer with ID already exists.\n";
            return;
        }

        Customer newCustomer;
        newCustomer.id = id;
        newCustomer.name = name;

        cout << "Enter Age: ";
        cin >> newCustomer.age;

        cout << "Enter Contact Number: ";
        cin >> newCustomer.contactNumber;

        customers[id] = newCustomer;

        cout << "Customer added successfully!\n";
    }

    // Add a rental record to an existing customer
    void updateHistory(string id, string consoleName, int duration) {
        if (!customerExists(id)) {
            cout << "Customer ID not found.\n";
            return;
        }

        customers[id].addRental(consoleName, duration);
        cout << "Rental record added successfully!\n";
    }

    // Display all rental history for a customer
    void viewCustomerHistory(string id) {
        if (!customerExists(id)) {
            cout << "Customer ID not found.\n";
            return;
        }

        customers[id].displayHistory();
    }

    // Show customer details (latest rental included)
    void displayCustomerDetails(string id) {
        if (!customerExists(id)) {
            cout << "Customer ID not found.\n";
            return;
        }

        customers[id].displayDetails();
    }

    // Show all customers
    void displayAllCustomers() {
        if (customers.empty()) {
            cout << "No customers found.\n";
            return;
        }

        for (const auto& [id, customer]: customers) {
            cout << "--- Customer: " << id << " ---\n";
            customer.displayDetails();
        }
    }

    // Check if a customer exists by ID
    bool customerExists(string id) {
        return customers.find(id) != customers.end();
    }
};
