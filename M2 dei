// Note: This assumes the Console struct and Rental struct are already defined as shown in main file

class RentalManager {
private:
    list<Rental> currentRentals;

public:
    // Constructor
    RentalManager() {
        // Initialize empty rental list
    }

    // Add a new rental record with fees
    void rent(Console* c, string customer, string date) {
        // Check if console pointer is valid
        if (c == nullptr) {
            cout << "Error: Invalid console selected for rental.\n";
            return;
        }
        
        // Check if console is already rented
        if (isConsoleRented(c->id)) {
            cout << "Error: Console " << c->id << " is already rented.\n";
            return;
        }
        
        // Calculate rental fee based on console type
        double rentalFee = calculateRentalFee(c->name);
        
        // Display rental details and fee
        cout << "\n=== Rental Summary ===\n";
        cout << "Console: " << c->name << " (ID: " << c->id << ")\n";
        cout << "Customer: " << customer << "\n";
        cout << "Rental Date: " << date << "\n";
        cout << "Rental Fee: ₱" << rentalFee << "\n";
        
        // Confirm rental
        char confirm;
        cout << "Confirm rental? (y/n): ";
        cin >> confirm;
        
        if (confirm == 'y' || confirm == 'Y') {
            // Create new rental record
            Rental newRental;
            newRental.customer = customer;
            newRental.consoleID = c->id;
            newRental.date = date;
            newRental.rentalFee = rentalFee;
            newRental.status = "ACTIVE";
            
            // Add to current rentals list
            currentRentals.push_back(newRental);
            
            // Mark console as unavailable
            c->available = false;
            
            cout << "Successfully rented console " << c->id << " (" << c->name << ") to " << customer << " on " << date << ".\n";
            cout << "Total amount: ₱" << rentalFee << "\n";
            
            // Save updated rentals to file
            saveToFile();
        } else {
            cout << "Rental cancelled.\n";
        }
    }

    // Remove a rental record when console is returned with confirmation
    void returnRental(string consoleID) {
        // Search for the rental record using iterator
        auto it = currentRentals.begin();
        bool found = false;
        Rental* foundRental = nullptr;
        
        while (it != currentRentals.end()) {
            if (it->consoleID == consoleID) {
                foundRental = &(*it);
                found = true;
                break;
            } else {
                ++it;
            }
        }
        
        if (!found) {
            cout << "Error: No rental record found for console " << consoleID << ".\n";
            return;
        }
        
        // Display return details
        cout << "\n=== Return Rental Details ===\n";
        cout << "Console ID: " << foundRental->consoleID << "\n";
        cout << "Customer: " << foundRental->customer << "\n";
        cout << "Rental Date: " << foundRental->date << "\n";
        cout << "Rental Fee: ₱" << foundRental->rentalFee << "\n";
        cout << "Status: " << foundRental->status << "\n";
        
        // Calculate any additional fees (late fees, damage fees, etc.)
        double additionalFees = calculateAdditionalFees(foundRental);
        if (additionalFees > 0) {
            cout << "Additional Fees: ₱" << additionalFees << "\n";
            cout << "Total Amount Due: ₱" << (foundRental->rentalFee + additionalFees) << "\n";
        }
        
        // Confirm return
        char confirm;
        cout << "\nConfirm return rental? (y/n): ";
        cin >> confirm;
        
        if (confirm == 'y' || confirm == 'Y') {
            cout << "Console " << consoleID << " successfully returned by " << foundRental->customer << ".\n";
            
            // Store returned rental info for potential future reference
            Rental returnedRental = *foundRental;
            
            // Remove from current rentals list
            currentRentals.erase(it);
            
            // Save updated rentals to file
            saveToFile();
            
            // Return the rental pointer data for other components to use
            // (This would typically be used by other managers for updating inventory, customer history, etc.)
            
        } else {
            cout << "Return cancelled.\n";
        }
    }

    // Load current rentals from file
    void loadFromFile() {
        ifstream file("rentals.txt");
        
        if (!file.is_open()) {
            cout << "Warning: Could not open rentals.txt. Starting with empty rental list.\n";
            return;
        }
        
        currentRentals.clear(); // Clear existing rentals
        
        string customer, consoleID, date;
        
        // Read rental records line by line
        while (file >> customer >> consoleID >> date) {
            double rentalFee;
            string status;
            
            // Try to read fee and status (for backward compatibility)
            if (file >> rentalFee >> status) {
                Rental rental;
                rental.customer = customer;
                rental.consoleID = consoleID;
                rental.date = date;
                rental.rentalFee = rentalFee;
                rental.status = status;
                
                currentRentals.push_back(rental);
            } else {
                // Old format without fee and status
                Rental rental;
                rental.customer = customer;
                rental.consoleID = consoleID;
                rental.date = date;
                rental.rentalFee = 0.0; // Default fee
                rental.status = "ACTIVE"; // Default status
                
                currentRentals.push_back(rental);
            }
        }
        
        file.close();
        cout << "Loaded " << currentRentals.size() << " rental records from file.\n";
    }

    // Save current rentals to file
    void saveToFile() {
        ofstream file("rentals.txt");
        
        if (!file.is_open()) {
            cout << "Error: Could not save rentals to file.\n";
            return;
        }
        
        // Write each rental record to file
        for (const auto& rental : currentRentals) {
            file << rental.customer << " " << rental.consoleID << " " << rental.date 
                 << " " << rental.rentalFee << " " << rental.status << "\n";
        }
        
        file.close();
    }

    // Display all active rentals
    void showAllRentals() {
        if (currentRentals.empty()) {
            cout << "\n=== No Active Rentals ===\n";
            return;
        }
        
        cout << "\n=== Current Active Rentals ===\n";
        cout << "Customer\t\tConsole ID\tRental Date\tFee\tStatus\n";
        cout << "--------------------------------------------------------\n";
        
        // Use range-based for loop to display all rentals
        for (const auto& rental : currentRentals) {
            cout << rental.customer << "\t\t" << rental.consoleID << "\t\t" 
                 << rental.date << "\t₱" << rental.rentalFee << "\t" << rental.status << "\n";
        }
        
        cout << "\nTotal active rentals: " << currentRentals.size() << "\n";
    }

    // Check if a console is currently rented
    bool isConsoleRented(string consoleID) {
        // Use find_if algorithm to search for console ID
        auto it = find_if(currentRentals.begin(), currentRentals.end(),
            [consoleID](const Rental& rental) {
                return rental.consoleID == consoleID;
            });
        
        return it != currentRentals.end();
    }

    // Get rental information for a specific console
    Rental* getRentalInfo(string consoleID) {
        // Search for rental record and return pointer if found
        for (auto& rental : currentRentals) {
            if (rental.consoleID == consoleID) {
                return &rental;
            }
        }
        return nullptr; // Not found
    }

    // Get all rentals for a specific customer
    list<Rental> getCustomerRentals(string customer) {
        list<Rental> customerRentals;
        
        // Filter rentals by customer name
        for (const auto& rental : currentRentals) {
            if (rental.customer == customer) {
                customerRentals.push_back(rental);
            }
        }
        
        return customerRentals;
    }

    // Get total number of active rentals
    int getTotalRentals() {
        return currentRentals.size();
    }

    // Check if customer has any active rentals
    bool hasActiveRentals(string customer) {
        auto it = find_if(currentRentals.begin(), currentRentals.end(),
            [customer](const Rental& rental) {
                return rental.customer == customer;
            });
        
        return it != currentRentals.end();
    }

    // Display rental statistics
    void showRentalStatistics() {
        cout << "\n=== Rental Statistics ===\n";
        cout << "Total active rentals: " << currentRentals.size() << "\n";
        
        if (!currentRentals.empty()) {
            // Count unique customers
            list<string> uniqueCustomers;
            for (const auto& rental : currentRentals) {
                bool found = false;
                for (const auto& customer : uniqueCustomers) {
                    if (customer == rental.customer) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    uniqueCustomers.push_back(rental.customer);
                }
            }
            
            cout << "Unique customers with active rentals: " << uniqueCustomers.size() << "\n";
        }
    }

    // Clear all rental records (for testing/admin purposes)
    void clearAllRentals() {
        currentRentals.clear();
        saveToFile();
        cout << "All rental records cleared.\n";
    }
};

// Additional utility functions for Rental Manager

// Function to validate rental input
bool validateRentalInput(string customer, string consoleID, string date) {
    // Check if customer name is not empty
    if (customer.empty()) {
        cout << "Error: Customer name cannot be empty.\n";
        return false;
    }
    
    // Check if console ID is not empty
    if (consoleID.empty()) {
        cout << "Error: Console ID cannot be empty.\n";
        return false;
    }
    
    // Check if date is not empty
    if (date.empty()) {
        cout << "Error: Date cannot be empty.\n";
        return false;
    }
    
    return true;
}

// Fee calculation functions for different console types
double calculateRentalFee(string consoleName) {
    // Convert to lowercase for case-insensitive comparison
    transform(consoleName.begin(), consoleName.end(), consoleName.begin(), ::tolower);
    
    // Different rental fees based on console type (₱500 - ₱1000 range)
    if (consoleName.find("ps5") != string::npos || consoleName.find("playstation 5") != string::npos) {
        return 950.0; // Premium console
    } else if (consoleName.find("ps4") != string::npos || consoleName.find("playstation 4") != string::npos) {
        return 750.0;
    } else if (consoleName.find("xbox") != string::npos && consoleName.find("series") != string::npos) {
        return 950.0; // Xbox Series X/S
    } else if (consoleName.find("xbox one") != string::npos) {
        return 750.0;
    } else if (consoleName.find("nintendo switch") != string::npos || consoleName.find("switch") != string::npos) {
        return 800.0;
    } else if (consoleName.find("nintendo") != string::npos) {
        return 600.0; // Older Nintendo consoles
    } else if (consoleName.find("steam deck") != string::npos) {
        return 1000.0; // Most expensive
    } else {
        return 650.0; // Default fee for other consoles
    }
}

// Calculate additional fees (late fees, damage, etc.)
double calculateAdditionalFees(Rental* rental) {
    double additionalFees = 0.0;
    
    // Check if rental is overdue (simple implementation)
    if (rental->status == "OVERDUE") {
        additionalFees += 200.0; // Late fee ₱200
    }
    
    // Could add more fee types here:
    // - Damage fees: ₱500-1500
    // - Cleaning fees: ₱100-300
    // - Extension fees: ₱100-500
    
    return additionalFees;
}
